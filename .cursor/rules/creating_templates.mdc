---
description: Step-by-step guide for creating new section templates in the template system. Covers defining types, creating components, and integrating with the factory system.
---

# Creating New Templates

This guide walks through the process of creating new section templates in the template system.

## Step 1: Define the Template Type

First, ensure the template type is defined in the appropriate type definition files:

1. If it's a new section type, add it to the `@schnellsite/types` package or extend the local types in `types/sections.ts`:

```typescript
// For a new section type (e.g., "pricing")
export interface PricingSectionProps extends SectionBaseProps {
  plans: PricingPlan[];
  title?: string;
  subtitle?: string;
}
```

2. Define the template variant type:

```typescript
// In @schnellsite/types or local types
export type PricingSectionTemplate = 'pricing-cards' | 'pricing-table';
```

## Step 2: Create the Section Component

Create the actual section component in the `sections/` directory:

```typescript
// sections/pricing/PricingCardsSection.tsx
import React from 'react';
import type { PricingSectionProps } from '../../types';
import { PricingCard } from '../../blocks/pricing/PricingCard';

export const PricingCardsSection: React.FC<PricingSectionProps> = ({
  plans,
  id,
  className = '',
  title,
  subtitle,
}) => {
  if (!plans || plans.length === 0) {
    return null;
  }

  return (
    <section id={id} className={`py-12 px-4 ${className}`}>
      <div className="container mx-auto">
        {(title || subtitle) && (
          <div className="text-center mb-12">
            {title && <h2 className="text-3xl font-bold mb-4">{title}</h2>}
            {subtitle && <p className="text-lg text-gray-600">{subtitle}</p>}
          </div>
        )}
        <div className="grid gap-6 grid-cols-1 md:grid-cols-3">
          {plans.map((plan, index) => (
            <PricingCard
              key={plan.id || index}
              plan={plan}
              className="h-full"
            />
          ))}
        </div>
      </div>
    </section>
  );
};
```

## Step 3: Create a Factory Function

Create a factory function in the `factory/` directory:

```typescript
// factory/pricing-factory.tsx
import React from 'react';
import type { PricingSectionProps } from '../types';
import type { PricingSectionTemplate } from '@schnellsite/types';
import { PricingCardsSection } from '../sections/pricing/PricingCardsSection';
import { PricingTableSection } from '../sections/pricing/PricingTableSection';

/**
 * Factory function to create a pricing section based on the template ID
 */
export const createPricingSection = (
  props: PricingSectionProps & { templateId: PricingSectionTemplate }
): React.ReactElement | null => {
  const { templateId, ...restProps } = props;

  switch (templateId) {
    case 'pricing-cards':
      return <PricingCardsSection {...restProps} />;
    case 'pricing-table':
      return <PricingTableSection {...restProps} />;
    default:
      console.warn(`Template not found: ${templateId}`);
      return <PricingCardsSection {...restProps} />;
  }
};

export default createPricingSection;
```

## Step 4: Update the Main Factory

Update the main `createSection` function in `index.ts` to include your new section type:

```typescript
export const createSection = (
  type: string,
  templateId: string,
  props: any
): React.ReactElement | null => {
  switch (type) {
    case "services":
      return createServicesSection({ ...props, templateId });
    case "testimonials":
      return createTestimonialSection({ ...props, templateId });
    case "pricing":
      return createPricingSection({ ...props, templateId });
    // Add other section types as they are implemented
    default:
      console.warn(`Section type not supported: ${type}`);
      return null;
  }
};
```

## Step 5: Update Available Templates

Add your new templates to the `getAvailableTemplates` function in `index.ts`:

```typescript
export const getAvailableTemplates = () => {
  return {
    services: [
      // existing services templates
    ],
    testimonials: [
      // existing testimonial templates
    ],
    pricing: [
      {
        id: "pricing-cards",
        value: "pricing-cards",
        name: "Pricing Cards",
        description: "Displays pricing plans in a grid of cards"
      },
      {
        id: "pricing-table",
        value: "pricing-table",
        name: "Pricing Table",
        description: "Displays pricing plans in a comparison table"
      }
    ]
  };
};
``` 